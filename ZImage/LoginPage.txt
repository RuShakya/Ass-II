import tkinter as tk
from PIL import Image, ImageTk

class LoginPage():
    def __init__(self, root):
        self.root = root
        self.root.title("Login Page")
        self.root.geometry("800x600")
        self.root.configure(bg="#FFF5EE")

        # Call the method to load the image
        self.load_image()

    def load_image(self):
        # LOAD THE IMAGE
        image_path = "image_1.webp"
        original_image = Image.open(image_path)

        # Resize the image to the desired dimensions
        target_width = 500
        target_height = 500
        resized_image = original_image.resize((target_width, target_height))

        # Convert the resized PIL Image to a Tkinter PhotoImage
        photo = ImageTk.PhotoImage(resized_image)

        # Create a label to display the image
        image_label = tk.Label(self.root, image=photo)
        image_label.image = photo  # This line is important to prevent the image from being garbage-collected
        image_label.pack()

if __name__ == "__main__":
    root = tk.Tk()
    page = LoginPage(root)
    root.mainloop()


# Apply blur filter to the image
        self.blurred_image = self.image1.filter(ImageFilter.BLUR)
        
        # Convert the blurred image to PhotoImage
        self.photo1 = ImageTk.PhotoImage(self.blurred_image)

        self.alabel = tk.Label(image=self.photo1)
        self.alabel.place(x=-50, y=-700)       


self.image1 = Image.open("C:\\Users\\user\\Desktop\\Sem 2 - Assignment 2\\Ass-II\\ZImage\\image_101.jpg")
        # Apply blur filter to the image
        self.blurred_image = self.image1.filter(ImageFilter.BLUR)
        # Apply a brightness enhancement to make the image lighter
        brightness_factor = 3.0  # Adjust as needed
        self.enhanced_image = ImageEnhance.Brightness(self.blurred_image).enhance(brightness_factor)
        # Convert the bright image to PhotoImage
        self.photo1 = ImageTk.PhotoImage(self.enhanced_image)
        self.alabel = tk.Label(image=self.photo1)
        self.alabel.place(x=-50, y=-690)  



def delete_pages(self):
        for frame in self.main_frame.winfo_children():
            frame.destroy()

    def indicate(self, lb, page):    
        self.hide_indicators()
        lb.config(bg="yellow")
        self.delete_pages()
        page()

    
    def indicate(self, lb, page):
        self.hide_indicators()
        lb.config(bg="yellow")
        self.current_frame = tk.Frame(self.main_frame)
        page(self.current_frame)
        self.current_frame.pack(pady=20)
        self.delete_pages()